
# -*- coding: utf-8 -*-
import os
import sys
import time
import random
import gradio as gr
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions

# --- API Key (V·∫™N C√ì R·ª¶I RO B·∫¢O M·∫¨T CAO KHI ƒê·ªÇ TR·ª∞C TI·∫æP TRONG CODE) ---
API_KEY = "AIzaSyBybfBSDLx39DdnZbHyLbd21tQAdfHtbeE" # <-- R·ª¶I RO B·∫¢O M·∫¨T

genai_configured = False
# 1) Ki·ªÉm tra v√† c·∫•u h√¨nh API Key t·ª´ code (Gi·ªØ nguy√™n)
if not API_KEY:
    print("[ERROR] API Key b·ªã thi·∫øu trong code.]")
else:
    print("[INFO] API Key ƒë∆∞·ª£c t·∫£i tr·ª±c ti·∫øp t·ª´ code.")
    print("ƒêang c·∫•u h√¨nh Google AI...")
    try:
        genai.configure(api_key=API_KEY)
        genai_configured = True
        print("[OK] Google AI ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng (c√∫ ph√°p).")
    except Exception as e:
        print(f"[ERROR] Kh√¥ng th·ªÉ c·∫•u h√¨nh Google AI ngay c·∫£ v·ªõi c√∫ ph√°p: {e}")
        genai_configured = False

# 2) Model v√† H√†m tr·ª£ gi√∫p ƒë·ªãnh d·∫°ng l·ªói (Gi·ªØ nguy√™n)
MODEL_NAME_CHAT = "gemini-2.5-flash-preview-04-17"
print(f"S·ª≠ d·ª•ng model chat: {MODEL_NAME_CHAT}")

def format_api_error(e):
    # ... (H√†m format_api_error gi·ªØ nguy√™n) ...
    error_message = str(e)
    error_type = type(e).__name__
    print(f"[ERROR] L·ªói khi g·ªçi API: {error_type} - {error_message}")

    if isinstance(e, google_exceptions.PermissionDenied):
        if "API key not valid" in error_message or "API_KEY_INVALID" in error_message:
             return "‚ùå L·ªói: API Key ƒë∆∞·ª£c c·∫•u h√¨nh nh∆∞ng Google t·ª´ ch·ªëi khi s·ª≠ d·ª•ng (API_KEY_INVALID). C√≥ th·ªÉ key ƒë√£ b·ªã v√¥ hi·ªáu h√≥a."
        else:
             return f"‚ùå L·ªói: T·ª´ ch·ªëi quy·ªÅn truy c·∫≠p (Permission Denied) cho model '{MODEL_NAME_CHAT}'. API key c·ªßa b·∫°n c√≥ th·ªÉ kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng model n√†y ho·∫∑c ch∆∞a b·∫≠t 'Generative Language API' trong Google Cloud."
    elif isinstance(e, google_exceptions.InvalidArgument) and "API key not valid" in error_message:
        return "‚ùå L·ªói: API Key kh√¥ng h·ª£p l·ªá (InvalidArgument). Key cung c·∫•p kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a."
    elif isinstance(e, google_exceptions.NotFound):
         return f"‚ùå L·ªói: Model '{MODEL_NAME_CHAT}' kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng t·ªìn t·∫°i v·ªõi API key c·ªßa b·∫°n."
    elif isinstance(e, google_exceptions.ResourceExhausted):
         return "‚ùå L·ªói: ƒê√£ v∆∞·ª£t qu√° H·∫°n ng·∫°ch API (Quota) ho·∫∑c T√†i nguy√™n ƒë√£ c·∫°n ki·ªát (429). Vui l√≤ng th·ª≠ l·∫°i sau."
    elif isinstance(e, google_exceptions.DeadlineExceeded):
         return "‚ùå L·ªói: Y√™u c·∫ßu v∆∞·ª£t qu√° th·ªùi gian ch·ªù (Timeout/Deadline Exceeded/504)."
    elif isinstance(e, AttributeError) and "start_chat" in error_message:
         return f"‚ùå L·ªói: Model '{MODEL_NAME_CHAT}' c√≥ th·ªÉ kh√¥ng h·ªó tr·ª£ ph∆∞∆°ng th·ª©c `start_chat`."
    else:
         return f"‚ùå L·ªói khi g·ªçi AI ({error_type}): {error_message}"


# --- Danh s√°ch Emoji L·ªõn (80+ icons) ---
LARGE_CYCLING_EMOJIS = [
    "üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä", "üòã", "üòé", "üòç", "üòò", "ü•∞", "üòó", "üòô", "üòö", "üôÇ", "ü§ó", "ü§©", "ü§î", "ü§®", "üòê", "üòë", "üò∂", "üôÑ", "üòè", "üò£", "üò•", "üòÆ", "ü§ê", "üòØ", "üò™", "üò´", "üò¥", "üòå", "üòõ", "üòú", "üòù", "ü§§", "üòí", "üòì", "üòî", "üòï", "üôÉ", "ü§ë", "üò≤", "‚òπÔ∏è", "üôÅ", "üòñ", "üòû", "üòü", "üò§", "üò¢", "üò≠", "üò¶", "üòß", "üò®", "üò©", "ü§Ø", "üò¨", "üò∞", "üò±", "ü•µ", "ü•∂", "üò≥", "ü§™", "üòµ", "ü•¥", "üò†", "üò°", "ü§¨", "üò∑", "ü§í", "ü§ï", "ü§¢", "ü§Æ", "ü§ß", "üòá", "ü•≥", "ü•∫", "ü§†", "ü§°", "ü§•", "ü§´", "ü§≠", "üßê", "ü§ì", "üòà", "üëø", "üëπ", "üë∫", "üíÄ", "üëª", "üëΩ", "ü§ñ", "üí©", "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ", "üòø", "üòæ", "ü´∂", "üëç", "üëé", "üëå", "ü§å", "ü§è", "‚úåÔ∏è", "ü§û", "ü§ü", "ü§ò", "ü§ô", "üëà", "üëâ", "üëÜ", "üñï", "üëá", "‚òùÔ∏è", "‚úã", "ü§ö", "üñêÔ∏è", "üññ", "üëã", "üôè", "ü§ù", "üíÖ", "ü§≤", "üëê", "ü§ú", "ü§õ", "üôå", "üëè", "üëä", "‚úä", "ü§û", "üññ", "ü§ô", "üëã", "üí™", "ü¶µ", "ü¶∂", "üëÇ", "üëÉ", "üß†", "ü´Ä", "ü´Å", "ü¶∑", "ü¶¥", "üëÄ", "üëÅÔ∏è", "üëÖ", "üëÑ", "üë∂", "üßí", "üë¶", "üëß", "üßë", "üë±", "üë®", "üßî", "üë©", "üëµ", "üë¥", "üßì", "üë≤", "üë≥", "üëÆ", "üïµÔ∏è", "üíÇ", "üë∑", "ü§¥", "üë∏", "üëº", "üéÖ", "ü§∂", "ü¶∏", "ü¶π", "üßô", "üßö", "üßõ", "üßù", "üßû", "üßú", "ü¶©", "üêµ", "üêí", "ü¶ç", "ü¶ß", "üê∂", "üêï", "ü¶Æ", "üêï‚Äçü¶∫", "üê©", "üê∫", "ü¶ä", "üê±", "üêà", "üêà‚Äç‚¨õ", "ü¶Å", "üêØ", "üêÖ", "üêÜ", "üê¥", "ü¶Ñ", "ü¶ì", "ü¶å", "üêÆ", "üêÇ", "üêÉ", "üêÑ", "üê∑", "üêñ", "üêó", "üêΩ", "üêè", "üêë", "üêê", "üê™", "üê´", "ü¶ô", "ü¶í", "üêò", "ü¶£", "ü¶è", "ü¶õ", "üê≠", "üêÅ", "üêÄ", "üêπ", "üê∞", "üêá", "üêøÔ∏è", "ü¶î", "ü¶á", "üêª", "üê®", "üêº", "ü¶•", "ü¶¶", "ü¶®", "ü¶ò", "ü¶°", "üêæ", "üêâ", "üê≤", "üåµ", "üéÑ", "üå≤", "üå≥", "üå¥", "üå±", "üåø", "‚òòÔ∏è", "üçÄ", "üéç", "üéã", "üçÉ", "üçÇ", "üçÅ", "üçÑ", "üåæ", "üíê", "üå∑", "üåπ", "ü•Ä", "üå∫", "üå∏", "üåº", "üåª", "üåû", "üåù", "üåõ", "üåú", "üåö", "üåï", "üåñ", "üåó", "üåò", "üåë", "üåí", "üåì", "üåî", "üåô", "üåé", "üåç", "üåè", "üí´", "‚≠êÔ∏è", "üåü", "‚ú®", "‚ö°Ô∏è", "‚òÑÔ∏è", "üí•", "üî•", "üå™Ô∏è", "üåà", "‚òÄÔ∏è", "üå§Ô∏è", "‚õÖÔ∏è", "üå•Ô∏è", "üå¶Ô∏è", "üåßÔ∏è", "‚õàÔ∏è", "üå©Ô∏è", "üå®Ô∏è", "‚ùÑÔ∏è", "‚òÉÔ∏è", "‚õÑÔ∏è", "üå¨Ô∏è", "üí®", "üíß", "üåä", "üå´Ô∏è", "üí¶", "‚òîÔ∏è", "‚òÇÔ∏è", "‚ö±Ô∏è", "ü™¥", "üèµÔ∏è", "üéóÔ∏è", "üéüÔ∏è", "üé´", "üéñÔ∏è", "üèÜ", "üèÖ", "ü•á", "ü•à", "ü•â", "‚öΩÔ∏è", "üèÄ", "üèà", "‚öæÔ∏è", "ü•é", "üéæ", "üèê", "üèâ", "ü•è", "üé±", "ü™Ä", "üèì", "üè∏", "ü•Ö", "üèí", "üèë", "üèè", "‚õ≥Ô∏è", "üèπ", "üé£", "ü§ø", "ü•ä", "ü•ã", "ü•å", "üõ∑", "‚õ∏Ô∏è", "üéø", "‚õ∑Ô∏è", "üèÇ", "üèãÔ∏è", "ü§º", "ü§∏", "‚õπÔ∏è", "ü§∫", "ü§æ", "üèåÔ∏è", "üèá", "üßò", "üõπ", "üõº", "üö£", "üèä", "‚õ¥Ô∏è", "üö§", "üõ•Ô∏è", "üõ≥Ô∏è", "‚õµÔ∏è", "üö¢", "‚úàÔ∏è", "üõ©Ô∏è", "üõ´", "üõ¨", "üöÅ", "üöü", "üö†", "üö°", "üöÇ", "üöÜ", "üöá", "üöà", "üöâ", "üöä", "üöù", "üöû", "üöã", "üöÉ", "üöé", "üöå", "üöç", "üöô", "üöó", "üöï", "üöñ", "üöõ", "üöö", "üöê", "üõª", "üöú", "üèçÔ∏è", "üõµ", "ü¶Ω", "ü¶º", "üõ∫", "üö≤", "üõ¥", "üõπ", "üõº", "üöè", "üõ£Ô∏è", "üõ§Ô∏è", "üõ¢Ô∏è", "‚õΩÔ∏è", "üö®", "üö•", "üö¶", "üõë", "üöß", "‚öìÔ∏è", "‚õµÔ∏è", "üö§", "üõ≥Ô∏è", "üõ•Ô∏è", "üö¢", "‚öìÔ∏è", "‚õΩÔ∏è", "üöß", "üíà", "üöè", "üé™", "üé≠", "üé®", "üé¨", "üé§", "üéß", "üéº", "üéπ", "ü•Å", "üé∑", "üé∫", "üé∏", "üéª", "üìØ", "ü™ó", "üéôÔ∏è", "üéöÔ∏è", "üéõÔ∏è", "üìª", "üì±", "üì≤", "‚òéÔ∏è", "üìû", "üìü", "üì†", "üîã", "üîå", "üíª", "üñ•Ô∏è", "üñ®Ô∏è", "‚å®Ô∏è", "üñ±Ô∏è", "üñ≤Ô∏è", "üíΩ", "üíæ", "üíø", "üìÄ", "üßÆ", "üé•", "üéûÔ∏è", "üìΩÔ∏è", "üì∫", "üì∑", "üì∏", "üìπ", "üìº", "üîç", "üîé", "üïØÔ∏è", "üí°", "üî¶", "üèÆ", "ü™î", "üìî", "üìï", "üìñ", "üìó", "üìò", "üìô", "üìö", "üìì", "üìí", "üìÉ", "üìú", "üìÑ", "üì∞", "üìë", "üîñ", "üí∞", "üí¥", "üíµ", "üí∂", "üí∑", "ü™ô", "üí≥", "üèß", "üí∏", "üí≤", "üí±", "üíπ", "‚úâÔ∏è", "üìß", "üì®", "üì©", "üì§", "üì•", "üì¶", "üì´", "üì™", "üì¨", "üì≠", "üìÆ", "üó≥Ô∏è", "‚úèÔ∏è", "‚úíÔ∏è", "üñãÔ∏è", "üñäÔ∏è", "üñåÔ∏è", "üñçÔ∏è", "üìù", "üìÅ", "üìÇ", "üóÇÔ∏è", "üìÖ", "üìÜ", "üóíÔ∏è", "üóìÔ∏è", "üìá", "üìà", "üìâ", "üìä", "üìã", "üìå", "üìç", "üìé", "üñáÔ∏è", "üìè", "üìê", "‚úÇÔ∏è", "üóÉÔ∏è", "üóÑÔ∏è", "üóëÔ∏è", "üîí", "üîì", "üîè", "üîê", "üîë", "üóùÔ∏è", "üî®", "ü™ì", "‚õèÔ∏è", "‚öíÔ∏è", "üõ†Ô∏è", "üó°Ô∏è", "‚öîÔ∏è", "üí£", "üõ°Ô∏è", "üö¨", "‚ö∞Ô∏è", "‚ö±Ô∏è", "üè∫", "üîÆ", "üìø", "üßø", "üíà", "‚öóÔ∏è", "üî≠", "üî¨", "üï≥Ô∏è", "üíä", "üíâ", "ü©∏", "ü©π", "ü©∫", "üö™", "üõèÔ∏è", "üõãÔ∏è", "ü™ë", "üöΩ", "üöø", "üõÅ", "ü™†", "ü™§", "üßª", "ü™í", "üß¥", "üß∑", "üßπ", "üß∫", "üßº", "ü™£", "üßΩ", "üßØ", "üöí", "üöì", "üöë", "üö®", "üöî", "üöç", "üöò", "üöñ", "üö°", "üö†", "üöü", "üöù", "üöÑ", "üöÖ", "üöà", "üöû", "üöÇ", "üöÜ", "üöá", "üöâ", "üöä", "üöã", "üöå", "üöé", "üèéÔ∏è", "üèçÔ∏è", "üöì", "üöë", "üöí", "üöê", "üõª", "üöö", "üöõ", "üöú", "ü¶Ø", "ü¶º", "ü¶Ω", "üõ¥", "üõπ", "üõµ", "üö≤", "üõ∫", "üõª", "üöè", "üõ£Ô∏è", "üõ§Ô∏è", "üõ¢Ô∏è", "‚õΩÔ∏è", "üö®", "üö•", "üö¶", "üõë", "üöß", "‚öìÔ∏è", "‚õµÔ∏è", "üõ∂", "üö§", "üõ•Ô∏è", "üõ≥Ô∏è", "‚õ¥Ô∏è", "üö¢", "‚úàÔ∏è", "üõ©Ô∏è", "üõ´", "üõ¨", "üõ∞Ô∏è", "üöÄ", "üõ∏", "üõéÔ∏è", "üß≥", "‚åõÔ∏è", "‚è≥", "‚åöÔ∏è", "‚è∞", "‚è±Ô∏è", "‚è≤Ô∏è", "üï∞Ô∏è", "üïõ", "üïß", "üïê", "üïú", "üïë", "üïù", "üïí", "üïû", "üïì", "üïü", "üïî", "üï†", "üïï", "üï°", "üïñ", "üï¢", "üïó", "üï£", "üïò", "üï§", "üïô", "üï•", "üïö", "üï¶", "üåë", "üåí", "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò", "üåô", "üåö", "üåõ", "üåú", "üåù", "üåû", "ü™ê", "‚≠êÔ∏è", "üåü", "üå†", "‚òÑÔ∏è", "‚ú®", "‚ö°Ô∏è", "‚òÄÔ∏è", "üå§Ô∏è", "‚õÖÔ∏è", "üå•Ô∏è", "üå¶Ô∏è", "üåßÔ∏è", "‚õàÔ∏è", "üå©Ô∏è", "üå®Ô∏è", "‚ùÑÔ∏è", "‚òÉÔ∏è", "‚õÑÔ∏è", "üå¨Ô∏è", "üí®", "üíß", "üí¶", "‚òîÔ∏è", "‚òÇÔ∏è", "üåä", "üå´Ô∏è", "üå´", "üåà", "üåÇ", "üßµ", "üß∂", "üëì", "üï∂Ô∏è", "ü•Ω", "ü•º", "ü¶∫", "üëî", "üëï", "üëñ", "üß£", "üß§", "üß•", "üß¶", "üëó", "üëò", "üëô", "üëö", "üëõ", "üëú", "üëù", "üõçÔ∏è", "üéí", "üëû", "üëü", "ü•æ", "ü•ø", "üë†", "üë°", "ü©∞", "ü©±", "ü©≤", "ü©≥", "üëô", "üëë", "üëí", "üé©", "üéì", "üß¢", "‚õëÔ∏è", "üíº", "üõ°Ô∏è", "üîó", "üìø", "üíç", "üíÑ", "üíã", "üåÇ", "‚òÇÔ∏è", "üßµ", "üß∂", "üåÇ", "‚òÇÔ∏è", "üßµ", "üß∂", "üèß", "üí¥", "üíµ", "üí∂", "üí∑", "üí∏", "üí≥", "üßæ", "üíπ", "‚úâÔ∏è", "üìß", "üì®", "üì©", "üì§", "üì•", "üì¶", "üì´", "üì™", "üì¨", "üì≠", "üìÆ", "üó≥Ô∏è", "‚úèÔ∏è", "‚úíÔ∏è", "üñãÔ∏è", "üñäÔ∏è", "üñåÔ∏è", "üñçÔ∏è", "üìù", "üìÅ", "üìÇ", "üóÇÔ∏è", "üìÖ", "üìÜ", "üóíÔ∏è", "üóìÔ∏è", "üìá", "üìà", "üìâ", "üìä", "üìã", "üìå", "üìç", "üìé", "üñáÔ∏è", "üìè", "üìê", "‚úÇÔ∏è", "üóÉÔ∏è", "üóÑÔ∏è", "üóëÔ∏è", "üîí", "üîì", "üîè", "üîê", "üîë", "üóùÔ∏è", "üî®", "ü™ì", "‚õèÔ∏è", "‚öíÔ∏è", "üõ†Ô∏è", "üó°Ô∏è", "‚öîÔ∏è", "üî´", "üí£", "üõ°Ô∏è", "üö¨", "‚ö∞Ô∏è", "‚ö±Ô∏è", "üè∫", "üîÆ", "üßø", "üìø", "üíà", "‚öóÔ∏è", "üî≠", "üî¨", "üï≥Ô∏è", "üíä", "üíâ", "ü©∏", "ü©π", "ü©∫", "üö™", "üõèÔ∏è", "üõãÔ∏è", "ü™ë", "üöΩ", "üöø", "üõÅ", "ü™†", "ü™§", "üßª", "ü™í", "üß¥", "üß∑", "üßπ", "üß∫", "üßº", "ü™£", "üßΩ", "üßØ", "üöí", "üöë", "üöí", "üöì", "üöî", "üö®", "üöç", "üöò", "üöñ", "üö°", "üö†", "üöü", "üöù", "üöÑ", "üöÖ", "üöà", "üöû", "üöÇ", "üöÜ", "üöá", "üöâ", "üöä", "üöã", "üöå", "üöé", "üèéÔ∏è", "üèçÔ∏è", "üõµ", "ü¶Ω", "ü¶º", "üõ∫", "üö≤", "üõ¥", "üõπ", "üõº", "üõª", "üöê", "üöö", "üöõ", "üöú", "üèóÔ∏è", "üè≠", "üè¢", "üè¨", "üè£", "üè§", "üè•", "üè¶", "üè®", "üè©", "üè™", "üè´", "üè¨", "üèØ", "üè∞", "üíí", "‚õ™Ô∏è", "üïå", "üïç", "üõï", "üïã", "‚õ©Ô∏è", "üõ§Ô∏è", "üõ£Ô∏è", "üóæ", "üéë", "üèûÔ∏è", "üèüÔ∏è", "üèõÔ∏è", "üèóÔ∏è", "üß±", "ü™®", "ü™µ", "üõñ", "üèöÔ∏è", "üè†", "üè°", "üèòÔ∏è", "üèôÔ∏è", "üåÜ", "üåÉ", "üåå", "üåâ", "üåÅ", "üöá", "üõ£Ô∏è", "üõ§Ô∏è", "‚õ¥Ô∏è", "üõ•Ô∏è", "üö§", "üõ≥Ô∏è", "üö¢", "‚úàÔ∏è", "üõ©Ô∏è", "üõ´", "üõ¨", "üöÅ", "üöü", "üö†", "üö°", "üõ∞Ô∏è", "üöÄ", "üõ∏", "üõéÔ∏è", "‚åõÔ∏è", "‚è≥", "‚åöÔ∏è", "‚è∞", "‚è±Ô∏è", "‚è≤Ô∏è", "üï∞Ô∏è", "üå°Ô∏è", "üåû", "üåù", "üåõ", "üåú", "üåö", "üåï", "üåñ", "üåó", "üåò", "üåë", "üåí", "üåì", "üåî", "üåô", "üåé", "üåç", "üåè", "üí´", "‚≠êÔ∏è", "üåü", "‚ú®", "‚òÑÔ∏è", "‚ö°Ô∏è", "‚òÄÔ∏è", "üå§Ô∏è", "‚õÖÔ∏è", "üå•Ô∏è", "üå¶Ô∏è", "üåßÔ∏è", "‚õàÔ∏è", "üå©Ô∏è", "üå®Ô∏è", "‚ùÑÔ∏è", "‚òÉÔ∏è", "‚õÑÔ∏è", "üå¨Ô∏è", "üí®", "üíß", "üí¶", "‚òîÔ∏è", "‚òÇÔ∏è", "üåä", "üå´Ô∏è", "üå¨Ô∏è", "üåÄ", "üå™Ô∏è", "üåà", "üåÇ", "‚òÇÔ∏è", "üåÇ"
]
# --- K·∫øt Th√∫c Danh S√°ch Emoji ---

# 3) H√†m callback Gradio (S·ª≠ d·ª•ng danh s√°ch emoji l·ªõn)
def respond(message, chat_history_state):
    if not genai_configured:
        error_msg = "‚ùå L·ªói: Google AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch (API Key c√≥ v·∫•n ƒë·ªÅ ho·∫∑c c·∫•u h√¨nh th·∫•t b·∫°i)."
        if isinstance(chat_history_state, list):
             chat_history_state.append([message, error_msg])
        else:
             chat_history_state = [[message, error_msg]]
        return "", chat_history_state, chat_history_state

    current_chat_history = list(chat_history_state)
    gemini_history = []
    for user_msg, model_msg in current_chat_history:
        if user_msg and isinstance(user_msg, str):
             gemini_history.append({'role': 'user', 'parts': [user_msg]})
        if model_msg and isinstance(model_msg, str) and not model_msg.startswith("‚ùå") and not model_msg.startswith("‚ö†Ô∏è"):
             gemini_history.append({'role': 'model', 'parts': [model_msg]})

    print(f"L·ªãch s·ª≠ g·ª≠i t·ªõi Gemini: {gemini_history}")
    print(f"Prompt m·ªõi: '{message[:70]}...'")

    current_chat_history.append([message, ""])
    response_index = len(current_chat_history) - 1

    full_response_text = ""
    final_status_message = ""
    emoji_cycle_index = 0 # Reset ch·ªâ s·ªë emoji cho m·ªói l·∫ßn g·ªçi

    try:
        model = genai.GenerativeModel(MODEL_NAME_CHAT)
        chat = model.start_chat(history=gemini_history)
        response = chat.send_message(message, stream=True)

        for chunk in response:
            try:
                chunk_text = getattr(chunk, 'text', '')
                if chunk_text:
                    for char in chunk_text:
                        full_response_text += char

                        # --- Thay ƒë·ªïi Emoji Li√™n T·ª•c t·ª´ danh s√°ch l·ªõn ---
                        current_emoji = LARGE_CYCLING_EMOJIS[emoji_cycle_index % len(LARGE_CYCLING_EMOJIS)] # S·ª≠ d·ª•ng list m·ªõi
                        emoji_cycle_index += 1
                        display_text = full_response_text + f" {current_emoji}" # Th√™m emoji ƒëang thay ƒë·ªïi
                        # --- K·∫øt Th√∫c Thay ƒê·ªïi Emoji ---

                        current_chat_history[response_index][1] = display_text
                        yield "", current_chat_history, current_chat_history
                        time.sleep(0.02) # Gi·ªØ nguy√™n t·ªëc ƒë·ªô g√µ ch·ªØ ch·∫≠m

                        # --- Hi·ªáu ·ª®ng Lag Gi·∫£ Ng·∫´u Nhi√™n (Gi·ªØ nguy√™n) ---
                        lag_probability = 0.005
                        if random.random() < lag_probability:
                            lag_duration = random.uniform(1.0, 1.75)
                            print(f"[INFO] Simulating high load pause for {lag_duration:.2f}s...")
                            time.sleep(lag_duration)
                        # --- K·∫øt Th√∫c Hi·ªáu ·ª®ng Lag ---

                else:
                    # ... (x·ª≠ l√Ω block/finish reason gi·ªØ nguy√™n) ...
                    block_reason = getattr(getattr(chunk, 'prompt_feedback', None), 'block_reason', None)
                    finish_reason = getattr(getattr(chunk.candidates[0], 'finish_reason', None)) if chunk.candidates else None
                    reason_text = ""
                    should_stop = False
                    if block_reason: reason_text, should_stop = f"Y√™u c·∫ßu/Ph·∫£n h·ªìi b·ªã ch·∫∑n ({block_reason})", True
                    elif finish_reason and finish_reason != 'STOP': reason_text, should_stop = f"Ph·∫£n h·ªìi b·ªã d·ª´ng ({finish_reason})", True

                    if reason_text:
                        print(f"[WARN] {reason_text}")
                        final_status_message = f"\n‚ö†Ô∏è ({reason_text})"
                        if should_stop: break

            except Exception as inner_e:
                # ... (x·ª≠ l√Ω l·ªói inner_e gi·ªØ nguy√™n) ...
                print(f"[ERROR] L·ªói khi x·ª≠ l√Ω chunk stream: {type(inner_e).__name__} - {inner_e}")
                final_status_message = f"\n‚ö†Ô∏è (L·ªói khi x·ª≠ l√Ω ph·∫ßn ti·∫øp theo: {inner_e})"
                break

        # --- D·ªçn d·∫πp cu·ªëi c√πng (gi·ªØ nguy√™n) ---
        final_clean_text = full_response_text
        if final_status_message and final_status_message not in final_clean_text:
             final_clean_text += final_status_message
        current_chat_history[response_index][1] = final_clean_text
        yield "", current_chat_history, current_chat_history
        print("[OK] Streaming ho√†n t·∫•t." if not final_status_message else "[WARN/ERROR] Streaming k·∫øt th√∫c v·ªõi tr·∫°ng th√°i.")

    except Exception as e:
        # ... (x·ª≠ l√Ω l·ªói API ch√≠nh gi·ªØ nguy√™n) ...
        error_msg = format_api_error(e)
        current_chat_history[response_index][1] = error_msg
        yield "", current_chat_history, current_chat_history


# 4) UI Gradio (Gi·ªØ nguy√™n CSS tƒÉng k√≠ch th∆∞·ªõc ch·ªØ)
custom_font_and_size_css = f"""
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@800&display=swap');

/* √Åp d·ª•ng ph√¥ng v√† k√≠ch th∆∞·ªõc cho bot */
.gradio-container .chatbot .message.bot {{
    font-family: 'Nunito', sans-serif !important;
    font-weight: 800 !important;
    font-size: 1.8em !important; /* Gi·ªØ nguy√™n k√≠ch th∆∞·ªõc ch·ªØ l·ªõn */
    line-height: 1.5 !important;
}}

/* √Åp d·ª•ng k√≠ch th∆∞·ªõc ch·ªØ cho ng∆∞·ªùi d√πng */
.gradio-container .chatbot .message.user {{
    font-size: 1.8em !important; /* Gi·ªØ nguy√™n k√≠ch th∆∞·ªõc ch·ªØ l·ªõn */
    line-height: 1.5 !important;
}}
"""

# X√¢y d·ª±ng giao di·ªán v·ªõi Blocks v√† CSS t√πy ch·ªânh
with gr.Blocks(theme=gr.themes.Default(), css=custom_font_and_size_css) as demo:
    gr.Markdown("## ZyRa X - t·∫°o b·ªüi D≈©ng")

    chatbot = gr.Chatbot(
        label="Chatbot",
        height=500,
        bubble_full_width=False,
        type='tuples',
        render_markdown=True,
        latex_delimiters=[
            { "left": "$$", "right": "$$", "display": True },
            { "left": "$", "right": "$", "display": False },
        ]
    )
    chat_history_state = gr.State(value=[])

    with gr.Row():
        msg = gr.Textbox(
            placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...",
            label="B·∫°n",
            scale=4,
            container=False
        )
        send_btn = gr.Button("G·ª≠i")

    clear_btn = gr.Button("üóëÔ∏è X√≥a cu·ªôc tr√≤ chuy·ªán")

    # --- K·∫øt n·ªëi s·ª± ki·ªán (Gi·ªØ nguy√™n) ---
    submit_event = msg.submit(
        fn=respond,
        inputs=[msg, chat_history_state],
        outputs=[msg, chatbot, chat_history_state]
    )
    click_event = send_btn.click(
        fn=respond,
        inputs=[msg, chat_history_state],
        outputs=[msg, chatbot, chat_history_state]
    )

    # H√†m x√≥a chat (Gi·ªØ nguy√™n)
    def clear_chat_func():
        return "", [], []
    clear_btn.click(
        fn=clear_chat_func,
        outputs=[msg, chatbot, chat_history_state],
        queue=False
    )

# 5) Ch·∫°y ·ª©ng d·ª•ng Gradio (Gi·ªØ nguy√™n)
print("ƒêang kh·ªüi ch·∫°y Gradio UI...")
demo.queue().launch(
    server_name='0.0.0.0',
    server_port=int(os.environ.get('PORT', 7860)),
    debug=False
)
print("Gradio UI ƒë√£ kh·ªüi ch·∫°y.")
