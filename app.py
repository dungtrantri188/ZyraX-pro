# -*- coding: utf-8 -*-
import os
import sys
import time  # Th√™m import time
import gradio as gr
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions

# --- API Key (V·∫™N C√ì R·ª¶I RO B·∫¢O M·∫¨T CAO KHI ƒê·ªÇ TR·ª∞C TI·∫æP TRONG CODE) ---
# L∆∞u √Ω: Key n√†y ƒë√£ b√°o l·ªói kh√¥ng h·ª£p l·ªá ·ªü l·∫ßn ki·ªÉm tra tr∆∞·ªõc.
# N·∫øu n√≥ v·∫´n kh√¥ng h·ª£p l·ªá, ·ª©ng d·ª•ng s·∫Ω b√°o l·ªói trong chat.
API_KEY = "AIzaSyBybfBSDLx39DdnZbHyLbd21tQAdfHtbeE" # <-- R·ª¶I RO B·∫¢O M·∫¨T

genai_configured = False
# 1) Ki·ªÉm tra v√† c·∫•u h√¨nh API Key t·ª´ code
if not API_KEY:
    print("[ERROR] API Key b·ªã thi·∫øu trong code.]")
else:
    print("[INFO] API Key ƒë∆∞·ª£c t·∫£i tr·ª±c ti·∫øp t·ª´ code.")
    print("ƒêang c·∫•u h√¨nh Google AI...")
    try:
        genai.configure(api_key=API_KEY)
        genai_configured = True
        print("[OK] Google AI ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng (c√∫ ph√°p).")
    except Exception as e:
        print(f"[ERROR] Kh√¥ng th·ªÉ c·∫•u h√¨nh Google AI ngay c·∫£ v·ªõi c√∫ ph√°p: {e}")
        genai_configured = False

# 2) Model v√† H√†m tr·ª£ gi√∫p ƒë·ªãnh d·∫°ng l·ªói
MODEL_NAME_CHAT = "gemini-2.5-flash-preview-04-17" # S·ª≠ d·ª•ng model preview
print(f"S·ª≠ d·ª•ng model chat: {MODEL_NAME_CHAT}")

def format_api_error(e):
    """ƒê·ªãnh d·∫°ng l·ªói API c·ªßa Google th√†nh th√¥ng b√°o th√¢n thi·ªán."""
    error_message = str(e)
    error_type = type(e).__name__
    print(f"[ERROR] L·ªói khi g·ªçi API: {error_type} - {error_message}") # Log l·ªói

    if isinstance(e, google_exceptions.PermissionDenied):
        if "API key not valid" in error_message or "API_KEY_INVALID" in error_message:
             return "‚ùå L·ªói: API Key ƒë∆∞·ª£c c·∫•u h√¨nh nh∆∞ng Google t·ª´ ch·ªëi khi s·ª≠ d·ª•ng (API_KEY_INVALID). C√≥ th·ªÉ key ƒë√£ b·ªã v√¥ hi·ªáu h√≥a."
        else: # L·ªói quy·ªÅn truy c·∫≠p model
             return f"‚ùå L·ªói: T·ª´ ch·ªëi quy·ªÅn truy c·∫≠p (Permission Denied) cho model '{MODEL_NAME_CHAT}'. API key c·ªßa b·∫°n c√≥ th·ªÉ kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng model n√†y ho·∫∑c ch∆∞a b·∫≠t 'Generative Language API' trong Google Cloud."
    elif isinstance(e, google_exceptions.InvalidArgument) and "API key not valid" in error_message:
        # L·ªói key kh√¥ng h·ª£p l·ªá nh∆∞ log tr∆∞·ªõc ƒë√≥
        return "‚ùå L·ªói: API Key kh√¥ng h·ª£p l·ªá (InvalidArgument). Key cung c·∫•p kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a."
    elif isinstance(e, google_exceptions.NotFound):
         return f"‚ùå L·ªói: Model '{MODEL_NAME_CHAT}' kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng t·ªìn t·∫°i v·ªõi API key c·ªßa b·∫°n."
    elif isinstance(e, google_exceptions.ResourceExhausted):
         return "‚ùå L·ªói: ƒê√£ v∆∞·ª£t qu√° H·∫°n ng·∫°ch API (Quota) ho·∫∑c T√†i nguy√™n ƒë√£ c·∫°n ki·ªát (429). Vui l√≤ng th·ª≠ l·∫°i sau."
    elif isinstance(e, google_exceptions.DeadlineExceeded):
         return "‚ùå L·ªói: Y√™u c·∫ßu v∆∞·ª£t qu√° th·ªùi gian ch·ªù (Timeout/Deadline Exceeded/504)."
    elif isinstance(e, AttributeError) and "start_chat" in error_message:
         return f"‚ùå L·ªói: Model '{MODEL_NAME_CHAT}' c√≥ th·ªÉ kh√¥ng h·ªó tr·ª£ ph∆∞∆°ng th·ª©c `start_chat`."
    else: # C√°c l·ªói kh√°c
         return f"‚ùå L·ªói khi g·ªçi AI ({error_type}): {error_message}"


# 3) H√†m callback Gradio (C√≥ ghi nh·ªõ, Streaming ch·∫≠m, Emoji t·∫°m th·ªùi)
def respond(message, chat_history_state):
    """X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng, g·ªçi AI v√† c·∫≠p nh·∫≠t giao di·ªán."""
    if not genai_configured:
        error_msg = "‚ùå L·ªói: Google AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch (API Key c√≥ v·∫•n ƒë·ªÅ ho·∫∑c c·∫•u h√¨nh th·∫•t b·∫°i)."
        if isinstance(chat_history_state, list):
             chat_history_state.append([message, error_msg])
        else:
             chat_history_state = [[message, error_msg]]
        return "", chat_history_state, chat_history_state

    current_chat_history = list(chat_history_state) # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi state g·ªëc tr·ª±c ti·∫øp

    # Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ Gradio sang ƒë·ªãnh d·∫°ng Gemini
    gemini_history = []
    for user_msg, model_msg in current_chat_history:
        if user_msg and isinstance(user_msg, str):
             gemini_history.append({'role': 'user', 'parts': [user_msg]})
        # Ch·ªâ th√™m tin nh·∫Øn th√†nh c√¥ng c·ªßa model v√†o l·ªãch s·ª≠ g·ª≠i ƒëi
        if model_msg and isinstance(model_msg, str) and not model_msg.startswith("‚ùå") and not model_msg.startswith("‚ö†Ô∏è"):
             gemini_history.append({'role': 'model', 'parts': [model_msg]})

    print(f"L·ªãch s·ª≠ g·ª≠i t·ªõi Gemini: {gemini_history}")
    print(f"Prompt m·ªõi: '{message[:70]}...'")

    # Th√™m placeholder cho ph·∫£n h·ªìi c·ªßa bot v√†o l·ªãch s·ª≠ hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
    current_chat_history.append([message, ""])
    response_index = len(current_chat_history) - 1 # Index c·ªßa ph·∫ßn t·ª≠ c·∫ßn c·∫≠p nh·∫≠t

    full_response_text = ""         # L∆∞u tr·ªØ text g·ªëc t·ª´ AI
    final_status_message = ""     # L∆∞u tr·ªØ c·∫£nh b√°o ho·∫∑c l·ªói cu·ªëi c√πng

    try:
        model = genai.GenerativeModel(MODEL_NAME_CHAT)
        chat = model.start_chat(history=gemini_history)
        response = chat.send_message(message, stream=True)

        # X·ª≠ l√Ω t·ª´ng chunk trong stream
        for chunk in response:
            try:
                chunk_text = getattr(chunk, 'text', '')
                if chunk_text:
                    # Th√™m t·ª´ng k√Ω t·ª± ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng g√µ ch·ªØ
                    for char in chunk_text:
                        full_response_text += char
                        # Hi·ªÉn th·ªã text hi·ªán t·∫°i + emoji t·∫°m th·ªùi
                        display_text = full_response_text + " üî•üí®"
                        current_chat_history[response_index][1] = display_text
                        yield "", current_chat_history, current_chat_history
                        # D·ª´ng m·ªôt ch√∫t ƒë·ªÉ l√†m ch·∫≠m t·ªëc ƒë·ªô
                        time.sleep(0.02) # ƒêi·ªÅu ch·ªânh gi√° tr·ªã n√†y ƒë·ªÉ thay ƒë·ªïi t·ªëc ƒë·ªô
                else:
                    # Ki·ªÉm tra l√Ω do d·ª´ng ho·∫∑c b·ªã ch·∫∑n
                    block_reason = getattr(getattr(chunk, 'prompt_feedback', None), 'block_reason', None)
                    finish_reason = getattr(getattr(chunk.candidates[0], 'finish_reason', None)) if chunk.candidates else None
                    reason_text = ""
                    should_stop = False
                    if block_reason: reason_text, should_stop = f"Y√™u c·∫ßu/Ph·∫£n h·ªìi b·ªã ch·∫∑n ({block_reason})", True
                    elif finish_reason and finish_reason != 'STOP': reason_text, should_stop = f"Ph·∫£n h·ªìi b·ªã d·ª´ng ({finish_reason})", True

                    if reason_text:
                        print(f"[WARN] {reason_text}")
                        # L∆∞u c·∫£nh b√°o ƒë·ªÉ hi·ªÉn th·ªã ·ªü cu·ªëi c√πng
                        final_status_message = f"\n‚ö†Ô∏è ({reason_text})"
                        if should_stop:
                             break # Tho√°t kh·ªèi v√≤ng l·∫∑p x·ª≠ l√Ω chunk

            except Exception as inner_e:
                # X·ª≠ l√Ω l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω chunk
                print(f"[ERROR] L·ªói khi x·ª≠ l√Ω chunk stream: {type(inner_e).__name__} - {inner_e}")
                # L∆∞u th√¥ng b√°o l·ªói ƒë·ªÉ hi·ªÉn th·ªã ·ªü cu·ªëi
                final_status_message = f"\n‚ö†Ô∏è (L·ªói khi x·ª≠ l√Ω ph·∫ßn ti·∫øp theo: {inner_e})"
                break # Tho√°t kh·ªèi v√≤ng l·∫∑p x·ª≠ l√Ω chunk

        # --- V√≤ng l·∫∑p stream k·∫øt th√∫c ---

        # D·ªçn d·∫πp: X√≥a emoji v√† th√™m th√¥ng b√°o tr·∫°ng th√°i (n·∫øu c√≥)
        final_clean_text = full_response_text
        if final_status_message and final_status_message not in final_clean_text:
             # Ch·ªâ th√™m n·∫øu ch∆∞a c√≥ ho·∫∑c kh√¥ng ph·∫£i l√† ph·∫ßn c·ªßa text g·ªëc
             final_clean_text += final_status_message

        # C·∫≠p nh·∫≠t l·ªãch s·ª≠ v·ªõi text cu·ªëi c√πng ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp
        current_chat_history[response_index][1] = final_clean_text
        # Yield tr·∫°ng th√°i cu·ªëi c√πng
        yield "", current_chat_history, current_chat_history
        print("[OK] Streaming ho√†n t·∫•t." if not final_status_message else "[WARN/ERROR] Streaming k·∫øt th√∫c v·ªõi tr·∫°ng th√°i.")

    except Exception as e:
        # X·ª≠ l√Ω l·ªói API ch√≠nh (v√≠ d·ª•: key kh√¥ng h·ª£p l·ªá, kh√¥ng t√¨m th·∫•y model, h·∫øt quota)
        error_msg = format_api_error(e)
        # C·∫≠p nh·∫≠t ph·∫ßn t·ª≠ placeholder v·ªõi th√¥ng b√°o l·ªói
        current_chat_history[response_index][1] = error_msg
        yield "", current_chat_history, current_chat_history


# 4) UI Gradio (S·ª≠ d·ª•ng State v√† CSS t√πy ch·ªânh)

# ƒê·ªãnh nghƒ©a CSS t√πy ch·ªânh ƒë·ªÉ √°p d·ª•ng ph√¥ng ch·ªØ Nunito ExtraBold 800
custom_font_css = """
@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@800&display=swap'); /* Y√™u c·∫ßu weight 800 */

/* Nh·∫Øm m·ª•c ti√™u c·ª• th·ªÉ ƒë·∫øn c√°c bong b√≥ng chat c·ªßa bot (AI) */
.gradio-container .chatbot .message.bot {
    font-family: 'Nunito', sans-serif !important; /* √Åp d·ª•ng ph√¥ng Nunito */
    font-weight: 800 !important; /* √Åp d·ª•ng weight 800 (ExtraBold) */
}

/* (T√πy ch·ªçn) B·∫°n c√≥ th·ªÉ ƒë·∫∑t ph√¥ng kh√°c cho ng∆∞·ªùi d√πng n·∫øu mu·ªën */
/*
.gradio-container .chatbot .message.user {
    font-family: sans-serif !important;
}
*/
"""

# X√¢y d·ª±ng giao di·ªán v·ªõi Blocks v√† CSS t√πy ch·ªânh
with gr.Blocks(theme=gr.themes.Default(), css=custom_font_css) as demo:
    gr.Markdown("## ZyRa X - t·∫°o b·ªüi D≈©ng")
    # ƒê√£ x√≥a c·∫£nh b√°o b·∫£o m·∫≠t kh·ªèi UI

    chatbot = gr.Chatbot(
        label="Chatbot",
        height=500,
        bubble_full_width=False,
        type='tuples', # Ch·ªâ ƒë·ªãnh r√µ r√†ng type cho chatbot
        render_markdown=True, # B·∫≠t hi·ªÉn th·ªã markdown
        latex_delimiters=[   # C·∫•u h√¨nh hi·ªÉn th·ªã LaTeX
            { "left": "$$", "right": "$$", "display": True },
            { "left": "$", "right": "$", "display": False },
        ]
    )
    # S·ª≠ d·ª•ng State ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ chat gi·ªØa c√°c l∆∞·ª£t g·ªçi h√†m respond
    chat_history_state = gr.State(value=[])

    with gr.Row():
        msg = gr.Textbox(
            placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...",
            label="B·∫°n",
            scale=4,
            container=False # ƒê·ªÉ textbox v√† button n·∫±m s√°t nhau h∆°n
        )
        send_btn = gr.Button("G·ª≠i")

    clear_btn = gr.Button("üóëÔ∏è X√≥a cu·ªôc tr√≤ chuy·ªán")

    # --- K·∫øt n·ªëi c√°c s·ª± ki·ªán v·ªõi h√†m x·ª≠ l√Ω ---
    # G·ª≠i khi nh·∫•n Enter trong Textbox
    submit_event = msg.submit(
        fn=respond,
        inputs=[msg, chat_history_state],
        outputs=[msg, chatbot, chat_history_state] # msg tr·ªëng, chatbot c·∫≠p nh·∫≠t, state c·∫≠p nh·∫≠t
    )
    # G·ª≠i khi nh·∫•n n√∫t "G·ª≠i"
    click_event = send_btn.click(
        fn=respond,
        inputs=[msg, chat_history_state],
        outputs=[msg, chatbot, chat_history_state]
    )

    # H√†m v√† s·ª± ki·ªán cho n√∫t "X√≥a cu·ªôc tr√≤ chuy·ªán"
    def clear_chat_func():
        """X√≥a n·ªôi dung textbox v√† l·ªãch s·ª≠ chat."""
        return "", [], [] # Tr·∫£ v·ªÅ gi√° tr·ªã r·ªóng cho msg, list r·ªóng cho chatbot v√† state
    clear_btn.click(
        fn=clear_chat_func,
        outputs=[msg, chatbot, chat_history_state],
        queue=False # Kh√¥ng c·∫ßn ƒë∆∞a v√†o h√†ng ƒë·ª£i v√¨ h√†nh ƒë·ªông nhanh
    )

# 5) Ch·∫°y ·ª©ng d·ª•ng Gradio
print("ƒêang kh·ªüi ch·∫°y Gradio UI...")
# S·ª≠ d·ª•ng server_name='0.0.0.0' ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ m√°y kh√°c trong m·∫°ng
# S·ª≠ d·ª•ng PORT t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh l√† 7860
demo.queue().launch(
    server_name='0.0.0.0',
    server_port=int(os.environ.get('PORT', 7860)),
    debug=False # T·∫Øt ch·∫ø ƒë·ªô debug khi tri·ªÉn khai
)
print("Gradio UI ƒë√£ kh·ªüi ch·∫°y.")
