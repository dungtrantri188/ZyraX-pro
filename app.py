# -*- coding: utf-8 -*-
import os
import time
import random
import gradio as gr
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions

# --- PH·∫¶N API KEY V√Ä C·∫§U H√åNH GENAI ---
# THAY API KEY C·ª¶A B·∫†N V√ÄO ƒê√ÇY
API_KEY = "YOUR_API_KEY_HERE" 

genai_configured = False
if not API_KEY or API_KEY == "AIzaSyAWrCJv5sesCGjaTx3xfLHLXzu4qi4R9EY":
    print("[ERROR] API Key b·ªã thi·∫øu ho·∫∑c ch∆∞a ƒë∆∞·ª£c thay ƒë·ªïi. Vui l√≤ng thay th·∫ø 'YOUR_API_KEY_HERE'.")
else:
    print("[INFO] API Key ƒë√£ ƒë∆∞·ª£c cung c·∫•p.")
    print("ƒêang c·∫•u h√¨nh Google AI...")
    try:
        genai.configure(api_key=API_KEY)
        genai_configured = True
        print("[OK] Google AI ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng.")
    except Exception as e:
        print(f"[ERROR] Kh√¥ng th·ªÉ c·∫•u h√¨nh Google AI: {e}")
        genai_configured = False

MODEL_NAME_CHAT = "gemini-2.5-pro-preview-06-05" 
print(f"S·ª≠ d·ª•ng model chat: {MODEL_NAME_CHAT}")


# --- H√ÄM format_api_error (Gi·ªØ nguy√™n) ---
def format_api_error(e):
    error_message = str(e)
    error_type = type(e).__name__
    print(f"[ERROR] L·ªói khi g·ªçi API: {error_type} - {error_message}")

    if isinstance(e, google_exceptions.PermissionDenied):
        if "API key not valid" in error_message or "API_KEY_INVALID" in error_message:
            return "‚ùå L·ªói: API Key kh√¥ng h·ª£p l·ªá. Google ƒë√£ t·ª´ ch·ªëi key n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i!"
        elif "permission to access model" in error_message:
            return f"‚ùå L·ªói: API Key n√†y kh√¥ng c√≥ quy·ªÅn truy c·∫≠p model '{MODEL_NAME_CHAT}'. H√£y th·ª≠ m·ªôt model kh√°c ho·∫∑c ki·ªÉm tra l·∫°i quy·ªÅn c·ªßa API Key."
        else:
            return f"‚ùå L·ªói: T·ª´ ch·ªëi quy·ªÅn truy c·∫≠p (PermissionDenied): {error_message}"
    elif isinstance(e, google_exceptions.InvalidArgument) and "API key not valid" in error_message:
        return "‚ùå L·ªói: API Key kh√¥ng h·ª£p l·ªá (InvalidArgument). Vui l√≤ng nh·∫≠p key cho ƒë√∫ng."
    elif isinstance(e, google_exceptions.NotFound):
        return f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y model '{MODEL_NAME_CHAT}'. C·∫≠u ch·∫Øc l√† n√≥ t·ªìn t·∫°i kh√¥ng ƒë·∫•y?!"
    elif isinstance(e, google_exceptions.ResourceExhausted):
        return "‚ùå L·ªói: H·∫øt quota r·ªìi! Vui l√≤ng ki·ªÉm tra gi·ªõi h·∫°n s·ª≠ d·ª•ng c·ªßa b·∫°n tr√™n Google AI Studio."
    elif isinstance(e, google_exceptions.DeadlineExceeded):
        return "‚ùå L·ªói: Y√™u c·∫ßu m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau."
    else:
        return f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi AI ({error_type}): {error_message}"

# --- H√ÄM respond (PHI√äN B·∫¢N CU·ªêI C√ôNG V·ªöI HI·ªÜU ·ª®NG G√ï CH·ªÆ) ---
def respond(message, chat_history_state):
    if not genai_configured:
        error_msg = "‚ùå L·ªói: Google AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch. Vui l√≤ng ki·ªÉm tra l·∫°i API KEY trong code."
        chat_history_state = (chat_history_state or []) + [[message, error_msg]]
        return "", chat_history_state, chat_history_state

    if not message or message.strip() == "":
        no_input_responses = [
            "N√†y! ƒê·ªãnh h·ªèi g√¨ th√¨ n√≥i ƒëi ch·ª©?",
            "Im l·∫∑ng th·∫ø? T√≠nh l√†m g√¨?",
            "H·ª≠m? Sao kh√¥ng n√≥i g√¨ h·∫øt v·∫≠y?",
        ]
        response_text = random.choice(no_input_responses)
        chat_history_state = (chat_history_state or []) + [[None, response_text]]
        return "", chat_history_state, chat_history_state

    # X√¢y d·ª±ng l·ªãch s·ª≠ chat cho API
    history = []
    if chat_history_state:
        for u, m in chat_history_state:
            is_error = m and isinstance(m, str) and (m.startswith("‚ùå") or m.startswith("‚ö†Ô∏è"))
            is_no_input_response = u is None
            if u and isinstance(u, str) and u.strip() and not is_no_input_response:
                history.append({'role': 'user', 'parts': [u]})
            if m and isinstance(m, str) and m.strip() and not is_error and not is_no_input_response:
                history.append({'role': 'model', 'parts': [m]})

    # Th√™m tin nh·∫Øn m·ªõi v√†o giao di·ªán tr∆∞·ªõc khi g·ªçi API
    chat_history_state = (chat_history_state or []) + [[message, ""]]
    idx = len(chat_history_state) - 1

    full_text = ""
    
    try:
        model = genai.GenerativeModel(MODEL_NAME_CHAT)
        safety_settings = [
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
        ]
        chat = model.start_chat(history=history)
        # Y√™u c·∫ßu API tr·∫£ v·ªÅ d·ªØ li·ªáu theo ki·ªÉu stream
        response = chat.send_message(message, stream=True, safety_settings=safety_settings)

        # V√≤ng l·∫∑p ngo√†i: Nh·∫≠n t·ª´ng chunk (g√≥i d·ªØ li·ªáu) t·ª´ API.
        # V√≤ng l·∫∑p n√†y s·∫Ω "d·ª´ng" ƒë·ªÉ ƒë·ª£i cho ƒë·∫øn khi API g·ª≠i v·ªÅ m·ªôt chunk m·ªõi.
        for chunk in response:
            # X·ª≠ l√Ω c√°c l·ªói c√≥ th·ªÉ x·∫£y ra v·ªõi chunk (gi·ªØ nguy√™n)
            if hasattr(chunk, 'prompt_feedback') and chunk.prompt_feedback.block_reason:
                block_reason = chunk.prompt_feedback.block_reason_message
                error_msg = f"‚ö†Ô∏è Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ b·ªã ch·∫∑n v·ªõi l√Ω do: {block_reason}. Vui l√≤ng kh√¥ng h·ªèi nh·ªØng ƒëi·ªÅu nh·∫°y c·∫£m."
                chat_history_state[idx][1] = error_msg
                yield "", chat_history_state, chat_history_state
                return

            # L·∫•y ph·∫ßn text t·ª´ trong chunk
            chunk_text = ""
            if chunk.parts:
                chunk_text = "".join(part.text for part in chunk.parts if hasattr(part, 'text'))

            if chunk_text:
                # V√≤ng l·∫∑p trong: L·∫∑p qua t·ª´ng K√ù T·ª∞ c·ªßa chunk ƒë√≥.
                for char in chunk_text:
                    # N·ªëi t·ª´ng k√Ω t·ª± v√†o chu·ªói ƒë·∫ßy ƒë·ªß
                    full_text += char
                    # C·∫≠p nh·∫≠t √¥ tr·∫£ l·ªùi c·ªßa bot trong l·ªãch s·ª≠ chat
                    chat_history_state[idx][1] = full_text
                    
                    # ----> ƒê√ÇY L√Ä CH√åA KH√ìA T·∫†O HI·ªÜU ·ª®NG G√ï CH·ªÆ <----
                    # T·∫°m d·ª´ng m·ªôt ch√∫t x√≠u gi·ªØa m·ªói k√Ω t·ª±.
                    # B·∫°n c√≥ th·ªÉ thay ƒë·ªïi s·ªë n√†y ƒë·ªÉ g√µ nhanh/ch·∫≠m h∆°n (v√≠ d·ª•: 0.01 ƒë·ªÉ nhanh, 0.1 ƒë·ªÉ ch·∫≠m).
                    time.sleep(0.03)
                    
                    # C·∫≠p nh·∫≠t giao di·ªán ngay sau m·ªói k√Ω t·ª±
                    yield "", chat_history_state, chat_history_state

        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p API kh√¥ng tr·∫£ v·ªÅ g√¨ c·∫£
        if not full_text:
             chat_history_state[idx][1] = "..."
             yield "", chat_history_state, chat_history_state

    except Exception as e:
        error_text = format_api_error(e)
        chat_history_state[idx][1] = error_text
        yield "", chat_history_state, chat_history_state


# --- GIAO DI·ªÜN GRADIO (Gi·ªØ nguy√™n) ---
with gr.Blocks(theme=gr.themes.Default()) as demo:
    gr.HTML('''
        <style>
        /* (To√†n b·ªô CSS c·ªßa b·∫°n ƒë∆∞·ª£c gi·ªØ nguy√™n ·ªü ƒë√¢y) */
        @import url('https://fonts.googleapis.com/css2?family=Nunito:wght@800&display=swap');
        body, .gradio-container { background-color: #f5f4ed !important; }
        * { font-family: 'Nunito', sans-serif !important; }
        .gradio-container .prose h2 { color: #CC7F66 !important; text-align: center; margin-bottom: 1rem; }
        .chatbot .message.user p, .chatbot .message.bot p { color: #8B4513 !important; }
        .chatbot .message.bot span:first-child:contains("‚ùå"), .chatbot .message.bot span:first-child:contains("‚ö†Ô∏è") { color: #D2691E !important; font-weight: bold; }
        .gradio-textbox textarea, .gradio-button span { color: #8B4513 !important; }
        .gradio-textbox textarea::placeholder { color: #A0522D; opacity: 0.7; }
        .chatbot .message.bot, .chatbot .message.user {
            border: 1px solid #FFDAB9 !important; border-radius: 15px !important;
            padding: 10px 15px !important; box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            max-width: 85%; word-wrap: break-word; overflow-wrap: break-word; white-space: pre-wrap; margin-bottom: 8px;
        }
        .chatbot .message.user { background: #FFF5E1 !important; border-radius: 15px 15px 0 15px !important; margin-left: auto; margin-right: 10px; }
        .chatbot .message.bot { background: #ffffff !important; border-radius: 15px 15px 15px 0 !important; margin-right: auto; margin-left: 10px; }
        .gradio-button { background-color: #FFDAB9 !important; border: 1px solid #CC7F66 !important; }
        .gradio-button:hover { background-color: #FFCFAF !important; box-shadow: 0 2px 4px rgba(0,0,0,0.15); }
        </style>
    ''')
    gr.Markdown("## ZyraX - t·∫°o b·ªüi D≈©ng")

    chatbot = gr.Chatbot(
        label="Cu·ªôc tr√≤ chuy·ªán",
        height=500,
        bubble_full_width=False,
        latex_delimiters=[{"left": "$$", "right": "$$", "display": True}, {"left": "$", "right": "$", "display": False}]
    )
    state = gr.State([])

    with gr.Row():
        txt = gr.Textbox(placeholder="H·ªèi t√¥i ƒëi·ªÅu g√¨ ƒë√≥...", label="B·∫°n", scale=4)
        btn = gr.Button("G·ª≠i", variant="primary")

    clr = gr.Button("üóëÔ∏è X√≥a cu·ªôc tr√≤ chuy·ªán")

    # K·∫øt n·ªëi s·ª± ki·ªán
    txt.submit(respond, [txt, state], [txt, chatbot, state])
    btn.click(respond, [txt, state], [txt, chatbot, state])
    clr.click(lambda: (None, [], []), outputs=[txt, chatbot, state], queue=False)

# --- KH·ªûI CH·∫†Y APP ---
print("ƒêang kh·ªüi ch·∫°y Gradio UI...")
# B·∫Øt bu·ªôc ph·∫£i c√≥ .queue() ƒë·ªÉ x·ª≠ l√Ω c√°c h√†m generator (yield)
demo.queue().launch(
    server_name='0.0.0.0',
    server_port=int(os.environ.get('PORT', 7860)),
    debug=False,
)
print("Gradio UI ƒë√£ kh·ªüi ch·∫°y.")
